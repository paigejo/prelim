xlower = as.numeric(dat[7])
ylower = as.numeric(dat[9])
t0 = as.numeric(dat[11])
dx = as.numeric(dat[13])
dy = as.numeric(dat[15])
dt = as.numeric(dat[17])
#get topography/bathmetry/deformation data
dat = array(as.numeric(dat[19:length(dat)]), dim=c(mx, my, mt))
out = list(dat=dat, mx=mx,my=my,mt=mt,xlower=xlower,ylower=ylower,
t0=t0,dx=dx,dy=dy,dt=dt)
return(out)
}
#CSZa: CSZR_XXL1.tt3
#CSZb: CSZR_XL1.tt3
#CSZc: CSZR_L1.tt3
#CSZd: CSZR_M1.tt3
#CSZe: CSZR_SM1.tt3
#CSZf: CSZ_SS3_Defm_FINAL.tt3
loadDeformations = function() {
wd = getwd()
setwd("~/git/M9/CSZR")
#topography data files
files = c("CSZR_XXL1.tt3", "CSZR_XL1.tt3", "CSZR_L1.tt3",
"CSZR_M1.tt3", "CSZR_SM1.tt3", "CSZ_SS3_Defm_FINAL.tt3")
#NOTE: CSZ_SS3_Defm_FINAL.tt3 has slightly different dx, dy, dt.
#Instead of 0.0166, 0.0166, and 0.5, it's 0.0167, 0.0167, and 1
#respectively
for(f in 1:length(files)) {
if(f == 1) {
out = loadTopo(files[f])
out$dat = out$dat[,,out$mt]
}
else {
#concatenate data in out list:
tmp = loadTopo(files[f])
out$dat = abind(out$dat, tmp$dat[,,tmp$mt], along=3)
out$mx = c(out$mx, tmp$mx)
out$my = c(out$my, tmp$my)
out$mt = c(out$mt, tmp$mt)
out$xlower = c(out$xlower, tmp$xlower)
out$ylower = c(out$ylower, tmp$ylower)
out$t0 = c(out$t0, tmp$t0)
out$dx = c(out$dx, tmp$dx)
out$dy = c(out$dy, tmp$dy)
out$dt = c(out$dt, tmp$dt)
}
}
#set wd back to what it was before
setwd(wd)
return(out)
}
loadAllDeformations = function() {
wd = getwd()
setwd("~/git/M9/CSZR")
#topography data files
files = system("ls *.tt3", intern=TRUE)
#NOTE: CSZ_SS3_Defm_FINAL.tt3 has slightly different dx, dy, dt.
#Instead of 0.0166, 0.0166, and 0.5, it's 0.0167, 0.0167, and 1
#respectively
for(f in 1:length(files)) {
if(f == 1) {
out = loadTopo(files[f])
out$dat = out$dat[,,out$mt]
}
else {
#concatenate data in out list:
tmp = loadTopo(files[f])
out$dat = abind(out$dat, tmp$dat[,,tmp$mt], along=3)
out$mx = c(out$mx, tmp$mx)
out$my = c(out$my, tmp$my)
out$mt = c(out$mt, tmp$mt)
out$xlower = c(out$xlower, tmp$xlower)
out$ylower = c(out$ylower, tmp$ylower)
out$t0 = c(out$t0, tmp$t0)
out$dx = c(out$dx, tmp$dx)
out$dy = c(out$dy, tmp$dy)
out$dt = c(out$dt, tmp$dt)
}
}
#set wd back to what it was before
setwd(wd)
return(out)
}
library(rARPACK)
defDat = loadAllDeformations()
dat = matrix(nrow=dim(defDat$dat)[3], ncol=dim(defDat$dat)[1]*dim(defDat$dat)[2])
for(i in 1:dim(defDat$dat)[3]) {
dat[i,] = c(defDat$dat[,,i])
}
grid = make.surface.grid(list(x=1:dim(defDat$dat)[1], y=1:dim(defDat$dat)[2]))
for(i in 1:nrow(dat)) {
quilt.plot(grid, c(dat[i,]), main=paste0(i, "th Realization"))
}
names(defDat)
defDat$ylower
dim(dat)
truncation = 19
out = svds(dat, k=truncation)
plot(out$d)
mu = colMeans(dat)
datCntr = sweep(dat, 2, mu)
out = svds(datCntr, k=truncation)
plot(out$d)
totalVar = norm(datCntr, type="F")^2
totalVar
plot(cumsum(out$d^2)/totalVar)
cumsum(out$d^2)/totalVar
dim(out$u)
scores = out$u %*% diag(out$d)
scores
dim(scores)
wd = getwd()
library(RcppCNPy)
library(fields)
library(abind)
#####get SageMathCloud testing data:
setwd("~/git/M9/test_data")
#allHMax
allHMax = array(NA, dim=c(6, 250, 250))
for(i in 0:5) {
fname = paste0("allHMax", i, ".npy")
tmp = npyLoad(fname)
allHMax[i+1, , ] = tmp
}
#topography/bathymetry, lon, lat
topo = npyLoad("CCTopo.npy")
lon = npyLoad("CCLon.npy")
lat = npyLoad("CCLat.npy")
setwd(wd)
source('~/git/M9/loadTestData.r')
defDat = loadAllDeformations()
defDat$files
source('~/git/M9/loadTestData.r')
defDat = loadAllDeformations()
defDat$files
source('~/git/M9/loadTestData.r')
defDat = loadAllDeformations()
out$files
defDat$files
defDat$files[c(1, 4, 7, 10, 12, 15, 19)]
defDat$files[c(1, 4, 7, 12, 15, 19)]
scores
testI = c(1, 4, 7, 12, 15, 19)
testScores = scores[testI,]
testScores
plot(1:length(out$d), out$d^2, pch=19, col="blue",
main="Deformation Variance Explained", xlab="", ylab="Singular Value")
cumVarExp = cumsum(out$d^2)
plot(1:length(out$d), cumVarExp/sum(out$d^2), pch=19, col="blue", ylim=c(0, 1),
main="Percent of Total Deformation Variance Explained", xlab="",
ylab="Singular Value")
plot(1:length(out$d), cumVarExp/sum(out$d^2), pch=19, col="blue", ylim=c(0, 1),
main="Fraction of Total Deformation Variance Explained", xlab="",
ylab="Cumulative Variance Explained (Frac)")
plot(1:length(out$d), cumVarExp/sum(out$d^2), pch=19, col="blue", ylim=c(0, 1),
main="Fraction of Total Deformation Variance Explained", xlab="",
ylab="Fraction Variance Explained")
plot(1:length(out$d), cumVarExp/sum(out$d^2), pch=19, col="blue", ylim=c(0, 1),
main="Cumulative Fraction Variance Explained", xlab="",
ylab="Variance Explained")
dim(grid)
for(i in 1:length(out$d)) {
quilt.plot(grid, c(out$v[,i]), main=paste0(i, "th Eigenmode"))
}
plot(cumsum(d^2)/sum(d^2), xlab="Principal Component", ylab="Variance Explained (Fraction)",
main="Cumulative Fraction of Variance Explained", pch=19, col="blue")
plot(cumsum(out$d^2)/sum(out$d^2), xlab="Principal Component", ylab="Variance Explained (Fraction)",
main="Cumulative Fraction of Variance Explained", pch=19, col="blue")
plot(cumsum(out$d^2)/sum(out$d^2), xlab="Eigenvector", ylab="Variance Explained (Fraction)",
main="Cumulative Fraction of Variance Explained", pch=19, col="blue")
cumsum(out$d^2)/sum(out$d^2)
truncation = 3 #eigenmodes 1-9 appear to have little noise, first 3 capture almost 98% of variation
testScores = scores[testI, 1:truncation]
testScores
characteristicScores = sweep(testScores, 2, sd)
charScores = sweep(testScores, 2, sd)
testScores
?sweep
charScores = apply(testScores, 2, sd) #chacteristic scores
charScores
normScores = sweep(testScores, 2, charScores, fun="/")
normScores = sweep(testScores, 2, 1/charScores, fun="*")
normScores = sweep(testScores, 2, 1/charScores, FUN="*")
normScores
charScores
testScores
scoreMean = apply(testScores, 2, mean) #chacteristic scores
scoreSD = apply(testScores, 2, sd) #chacteristic scores
normScores = sweep(testScores, 2, scoreMean)
normScores = sweep(normScores, 2, 1/scoreSD, FUN="*")
normScores
floodDat = loadFloodData()
allHMax = floodDat$allHMax
dim(allHMax)
maxFlood = apply(allHMax, 1, max)
dim(maxFlood)
length(maxFlood)
maxFlood
testScores
quilt.plot(normScores[,1], normScores[,2], maxFlood, main="x:1, y:2")
quilt.plot(normScores[,1], normScores[,3], maxFlood, main="x:1, y:3")
quilt.plot(normScores[,2], normScores[,3], maxFlood, main="x:2, y:3")
quilt.plot(normScores[,1], normScores[,2], maxFlood, main="x:1, y:2", nx=20, ny=20)
quilt.plot(normScores[,1], normScores[,3], maxFlood, main="x:1, y:3", nx=20, ny=20)
quilt.plot(normScores[,2], normScores[,3], maxFlood, main="x:2, y:3", nx=20, ny=20)
out$d^2
normScores = sweep(testScores, 2, scoreMean)
normScores = normScores*(1/sd(normScores))
normScores
normScores = sweep(testScores, 2, scoreMean)
normScores = normScores*(1/scoreSD)
normScores
scoreSD = sd(testScores) #chacteristic scores
normScores = sweep(testScores, 2, scoreMean)
normScores = normScores*(1/scoreSD)
normScores
normScores = sweep(testScores, 2, scoreMean)
normScores*(1/scoreSD)
normScores*(1/sd(normScores))
scoreMean = apply(testScores, 2, mean) #chacteristic scores
normScores = sweep(testScores, 2, scoreMean)
scoreSD = sd(normScores) #chacteristic scores
normScores = normScores*(1/scoreSD)
normScores
quilt.plot(normScores[,1], normScores[,2], maxFlood, main="x:1, y:2", nx=20, ny=20)
quilt.plot(normScores[,1], normScores[,3], maxFlood, main="x:1, y:3", nx=20, ny=20)
quilt.plot(normScores[,2], normScores[,3], maxFlood, main="x:2, y:3", nx=20, ny=20)
quilt.plot(normScores[,1], normScores[,2], maxFlood, xlim="1st Eigenvector Score",
ylim="2nd Eigenvector Score", nx=20, ny=20)
b="1st Eigenvector Score",
ylab="2nd Eigenvector Score", nx=20, ny=20)
quilt.plot(normScores[,1], normScores[,2], maxFlood, xlab="1st Eigenvector Score",
ylab="2nd Eigenvector Score", nx=20, ny=20)
quilt.plot(normScores[,1], normScores[,2], maxFlood, xlab="1st Eigenvector Score",
ylab="2nd Eigenvector Score", nx=20, ny=20, main="Max Flood Level")
quilt.plot(normScores[,1], normScores[,2], maxFlood, xlab="1st Eigenvector Score",
ylab="2nd Eigenvector Score", nx=20, ny=20, main="Max Flood Level (m)")
quilt.plot(normScores[,1], normScores[,3], maxFlood, xlab="1st Eigenvector Score",
ylab="3rd Eigenvector Score", nx=20, ny=20, main="Max Flood Level (m)")
quilt.plot(normScores[,2], normScores[,3], maxFlood, xlab="2nd Eigenvector Score",
ylab="3rd Eigenvector Score", nx=20, ny=20, main="Max Flood Level (m)"
)
?OPE
library(OEP)
library(OPE)
?OPE
dim(top)
dim(floodDat$top)
top = floodDat$topo
lon = floodDat$lon
lat = floodDat$lat
range(long)
range(lon)
dim(lon)
lonVals = sort(unique(lon))
latVals = sort(unique(lat))
floodGrid = grid(lon=lonVals, lat=latVals)
floodGrid = grid(list(lon=lonVals, lat=latVals))
floodGrid = make.surface.grid(list(lon=lonVals, lat=latVals))
for(i in 1:nrow(dat)) {
quilt.plot(floodGrid, c(residHMax[i,,]), main=paste0(i, "th Realization"))
}
residHMax = allHMax
for(i in 1:dim(allHMax)[1]) {
floodVals = allHMax[i,,]
model = lm(c(floodVals) ~ c(top))
residVals = residuals(model)
residHMax[i,,] = array(c(residVals), dim=c(1,nX,nY))
}
ion from allHMax
nX = dim(allHMax)[2]
nY = dim(allHMax)[3]
residHMax = allHMax
for(i in 1:dim(allHMax)[1]) {
floodVals = allHMax[i,,]
model = lm(c(floodVals) ~ c(top))
residVals = residuals(model)
residHMax[i,,] = array(c(residVals), dim=c(1,nX,nY))
}
for(i in 1:nrow(dat)) {
quilt.plot(floodGrid, c(residHMax[i,,]), main=paste0(i, "th Realization"))
}
for(i in 1:nrow(residHMax)) {
quilt.plot(floodGrid, c(residHMax[i,,]), main=paste0(i, "th Realization"))
}
dim(residHMax)
nrow(residHMax)
dim(floodGrid)
floodGrid[1:10,]
length(lonVals)
length(unique(lon))
?unique
lon[1:10,]
lon[1:10]
floodGrid = matrix(c(lon, lat), ncol=2)
dim(floodGrid)
for(i in 1:nrow(residHMax)) {
quilt.plot(floodGrid, c(residHMax[i,,]), main=paste0(i, "th Realization"))
}
residMean = apply(residHMax, c(2, 3), mean)
quilt.plot(floodGrid, residMean)
residCntr = sweep(residMean, c(2, 3), residMean)
?sweep
residCntr = sweep(residHMax, c(2, 3), residMean)
quilt.plot(floodGrid, residCntr)
for(i in 1:nrow(residHMax)) {
quilt.plot(floodGrid, c(residCntr[i,,]), main=paste0(i, "th Realization"))
}
allHMaxMean = apply(allHMax, c(2, 3), mean)
allHMaxMean = apply(allHMax, c(2, 3), mean)
allHMaxCntr = sweep(alHMax, c(2, 3), allHMaxMean)
allHMaxCntr = sweep(allHMax, c(2, 3), allHMaxMean)
for(i in 1:nrow(residHMax)) {
quilt.plot(floodGrid, c(allHMaxCntr[i,,]), main=paste0(i, "th Realization"))
}
for(i in 1:nrow(residHMax)) {
quilt.plot(floodGrid, c(residCntr[i,,]), main=paste0(i, "th Realization"))
}
for(i in 1:nrow(residHMax)) {
quilt.plot(floodGrid, c(residHMax[i,,]), main=paste0(i, "th Realization"))
}
for(i in 1:nrow(residHMax)) {
quilt.plot(floodGrid, c(allHMax[i,,]), main=paste0(i, "th Realization"))
}
for(i in 1:nrow(residHMax)) {
quilt.plot(floodGrid, c(allHMaxCntr[i,,]), main=paste0(i, "th Realization"))
}
for(i in 1:nrow(residHMax)) {
quilt.plot(floodGrid, c(residHMax[i,,]), main=paste0(i, "th Realization"))
}
?fft
test = mvfft(residCntr[1,,])
names(test)
dim(test)
quilt.plot(floodGrid, test)
quilt.plot(floodGrid, c(test))
test[1:5, 1:5]
abs(test[1:5, 1:5])
quilt.plot(floodGrid, abs(c(test)))
for(i in 1:nrow(residHMax)) { #this is the best, but is the model to complex?
quilt.plot(floodGrid, c(residCntr[i,,]), main=paste0(i, "th Realization"))
}
for(i in 1:nrow(residHMax)) {
quilt.plot(floodGrid, c(allHMax[i,,]), main=paste0(i, "th Realization"))
}
quilt.plot(floodGrid, c(top), main="elevation")
for(i in 1:nrow(residHMax)) { #this is the best, but is the model to complex?
quilt.plot(floodGrid, c(residCntr[i,,]), main=paste0(i, "th Realization"))
}
for(i in 1:nrow(residHMax)) { # for non-complex models, this is the best
quilt.plot(floodGrid, c(residHMax[i,,]), main=paste0(i, "th Realization"))
}
dim(normScores)
for(i in 1:nrow(residHMax)) { # for non-complex models, this is the best
quilt.plot(floodGrid, c(residHMax[i,,]), main=paste0(i, "th Realization"))
}
for(i in 1:nrow(residHMax)) { #this is the best, but is the model to complex?
quilt.plot(floodGrid, c(residCntr[i,,]), main=paste0(i, "th Realization"))
}
quilt.plot(normScores[,1], normScores[,2], maxFlood, xlab="1st Eigenvector Score",
ylab="2nd Eigenvector Score", nx=20, ny=20, main="Max Flood Level (m)")
quilt.plot(normScores[,1], normScores[,3], maxFlood, xlab="1st Eigenvector Score",
ylab="3rd Eigenvector Score", nx=20, ny=20, main="Max Flood Level (m)")
quilt.plot(normScores[,2], normScores[,3], maxFlood, xlab="2nd Eigenvector Score",
ylab="3rd Eigenvector Score", nx=20, ny=20, main="Max Flood Level (m)")
source('~/Desktop/d&d/roll.r')
r(2)
source('~/git/M9/loadTestData.r')
?boxplotVGram
library(fields)
?boxplotVGram
source('~/git/prelim/code/loadAll.R')
MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
traceback()
debugSource('~/git/prelim/code/ML.R')
MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
debugSource('~/git/prelim/code/ML.R')
MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
quilt.plot(gridCoords, muc)
alpha
beta
head(allLogLiks)
debugSource('~/git/prelim/code/ML.R')
View(MLPref)
undebug(MLPref)
debugSource('~/git/prelim/code/ML.R')
test = MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
warnings()
debugSource('~/git/prelim/code/ML.R')
test = MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
length(S0j)
length(muc[inds])
debugSource('~/git/prelim/code/ML.R')
test = MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
lik.XGivenS
lik.frac
lik.GP
lik.YGivenS0j
lik.S0jGivenY
sigmac
length(sigmac)
tau^2
sigma^2
sigma^2 - sigma^2/(sigma^2 + tau^2)
1/(sigma^2 + tau^2)
sigma^2 - sigma^2/(sigma + tau)^2
sigma^2 - sigma^4/(sigma + tau)^2
debugSource('~/git/prelim/code/ML.R')
test = MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
lik.frac
sigmac
lik.YGivenS0j
lik.S0jGivenY
head((S0j - muc[inds])/sigmac)
head(S)j
head(S0j)
head(Sj)
debugSource('~/git/prelim/code/ML.R')
test = MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
head(x)
head(z)
head(vec)
head(Zs)
head(dat)
head(mu)
class(S)
dim(S)
debugSource('~/git/prelim/code/ML.R')
test = MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
class(S)
S = genS(params, gridCoords, nsim=1)
test = as.matrix(S)
dim(test)
length(S)
length(test)
debugSource('~/git/prelim/code/ML.R')
test = MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
head(S)
debugSource('~/git/prelim/code/ML.R')
test = MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
head(S)
S = genS(params, gridCoords, nsim=1)
names(S)
test = S$variable1
is.null(test)
length(test)
head(test)
params
debugSource('~/git/prelim/code/ML.R')
test = MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
length(sims)
head(sims)
test = MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
names(sims)
head(gridCoords)
trueSill
beta
debugSource('~/git/prelim/code/ML.R')
debugSource('~/git/prelim/code/ML.R')
test = MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
beta
debugSource('~/git/prelim/code/ML.R')
debugSource('~/git/prelim/code/ML.R')
test = MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
beta
params
sill
phi
tausq
beta
mu97
names(sims)
head(sims$variable1)
?RFsimulate
RMexp
?RMexp
plot(sims)
trueSill
sqrt(trueSill)
trueSill + trueTausq
sqrt(trueSill + trueTausq)
sill= exp(params[2])^2
sill
debugSource('~/git/prelim/code/ML.R')
test = MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
plot(sims)
debugSource('~/git/prelim/code/ML.R')
test = MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
undebug(genS)
test = MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
debugSource('~/git/prelim/code/ML.R')
debugSource('~/git/prelim/code/ML.R')
test = MLPref(coords97, log97, coords00, log00,
initParams = c(mu97MLE, mu00MLE, log(sqrt(sillMLE)), log(scaleMLE), log(sqrt(nuggetMLE)), beta=betaMLE), nMCSamples=5)
