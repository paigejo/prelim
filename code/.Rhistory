plot(r, Krs, type="n", ylim=c(minRange, maxRange), lwd=2, col="blue",
main=expression("Observed and theoretical" ~ italic(K) ~
"functions"))
polygon(polyX, polyY, col=rgb(.4,.4,.4,.5), border=rgb(.5,.5,.5,.5))
lines(r, Krs, lwd=2, col=rgb(.15,.15,.15), lty=2)
# plot(r, Krs, type="l", ylim=c(minRange, maxRange), lwd=2, col="blue",
#      main=expression("Observed and theoretical" ~ italic(K) ~
#                      "functions"))
# lines(r, Krs - uncertainties, lty=2, col=rgb(.4,.4,.4))
# lines(r, Krs + uncertainties, lty=2, col=rgb(.4,.4,.4))
lines(r, testEnv97$obs, lwd=2)
legend(x="topleft", lty=c(1, 2), col=c("black", rgb(.15,.15,.15)), y.intersp=1,
legend=expression(italic(hat(K)[obs](r)), italic(K[theo](r))))
plot(r, Krs, type="n", ylim=c(minRange, maxRange), lwd=2, col="blue",
main=expression("Observed and theoretical" ~ italic(K) ~
"functions"))
polygon(polyX, polyY, col=rgb(.4,.4,.4,.5), border=rgb(.5,.5,.5,.5))
lines(r, Krs, lwd=2, col=rgb(.3,.3,.3), lty=2)
# plot(r, Krs, type="l", ylim=c(minRange, maxRange), lwd=2, col="blue",
#      main=expression("Observed and theoretical" ~ italic(K) ~
#                      "functions"))
# lines(r, Krs - uncertainties, lty=2, col=rgb(.4,.4,.4))
# lines(r, Krs + uncertainties, lty=2, col=rgb(.4,.4,.4))
lines(r, testEnv97$obs, lwd=2)
legend(x="topleft", lty=c(1, 2), col=c("black", rgb(.15,.15,.15)), y.intersp=1,
legend=expression(italic(hat(K)[obs](r)), italic(K[theo](r))))
plot(r, Krs, type="n", ylim=c(minRange, maxRange), lwd=2, col="blue",
main=expression("Observed and theoretical" ~ italic(K) ~
"functions"))
polygon(polyX, polyY, col=rgb(.4,.4,.4,.5), border=rgb(.5,.5,.5,.5))
lines(r, Krs, lwd=2, col=rgb(.4,.4,.4), lty=2)
# plot(r, Krs, type="l", ylim=c(minRange, maxRange), lwd=2, col="blue",
#      main=expression("Observed and theoretical" ~ italic(K) ~
#                      "functions"))
# lines(r, Krs - uncertainties, lty=2, col=rgb(.4,.4,.4))
# lines(r, Krs + uncertainties, lty=2, col=rgb(.4,.4,.4))
lines(r, testEnv97$obs, lwd=2)
legend(x="topleft", lty=c(1, 2), col=c("black", rgb(.15,.15,.15)), y.intersp=1,
legend=expression(italic(hat(K)[obs](r)), italic(K[theo](r))))
plot(r, Krs, type="n", ylim=c(minRange, maxRange), lwd=2, col="blue",
main=expression("Observed and theoretical" ~ italic(K) ~
"functions"))
polygon(polyX, polyY, col=rgb(.4,.4,.4,.5), border=rgb(.5,.5,.5,.5))
lines(r, Krs, lwd=2, col=rgb(.4,.4,.4), lty=2)
# plot(r, Krs, type="l", ylim=c(minRange, maxRange), lwd=2, col="blue",
#      main=expression("Observed and theoretical" ~ italic(K) ~
#                      "functions"))
# lines(r, Krs - uncertainties, lty=2, col=rgb(.4,.4,.4))
# lines(r, Krs + uncertainties, lty=2, col=rgb(.4,.4,.4))
lines(r, testEnv97$obs, lwd=2)
legend(x="topleft", lty=c(1, 2), col=c("black", rgb(.4,.4,.4)), y.intersp=1,
legend=expression(italic(hat(K)[obs](r)), italic(K[theo](r))), lwd=2)
plot(testEnv97, legendargs=legendargs,
main=expression("Estimated, simulated, and theoretical" ~ italic(K) ~
"functions (assuming homogeneity)"))
testEnv97 = envelope(ppp97, fun=Kinhom, rmax=.25, simulate=simExp, clamp=FALSE,
savefuns=TRUE, savepatterns = TRUE)
legendargs = list(x="topleft",
legend=expression(italic(hat(K)[obs](r)), italic(bar(K)[sim](r)),
italic(K[theo](r))),
lty=c(1, 2, 1), col=c("black", "red", "blue"), y.intersp=.4)
plot(testEnv97, legendargs=legendargs,
main=expression("Estimated, simulated, and theoretical" ~ italic(K) ~
"functions (not assuming homogeneity)"))
plot(testEnv97, legendargs=legendargs, xlim=c(0, .25),
main=expression("Estimated, simulated, and theoretical" ~ italic(K) ~
"functions (not assuming homogeneity)"))
rs = seq(.001, .25, length=100)
Krs = sapply(rs, K)
lines(rs, Krs, col="blue")
plot(testEnv97, legendargs=legendargs, xlim=c(0, .25), ylim=c(0, .3),
main=expression("Estimated, simulated, and theoretical" ~ italic(K) ~
"functions (not assuming homogeneity)"))
rs = seq(.001, .25, length=100)
Krs = sapply(rs, K)
lines(rs, Krs, col="blue")
getwd()
pdf("envelopeInhom.pdf", width=7, height=5)
plot(testEnv97, legendargs=legendargs, xlim=c(0, .25), ylim=c(0, .3)
main=expression("Estimated, simulated, and theoretical" ~ italic(K) ~
"functions (not assuming homogeneity)"))
rs = seq(.001, .25, length=100)
Krs = sapply(rs, K)
lines(rs, Krs, col="blue")
dev.off()
plot(testEnv97, legendargs=legendargs, xlim=c(0, .25), ylim=c(0, .3)
main=expression("Estimated, simulated, and theoretical" ~ italic(K) ~
"functions (not assuming homogeneity)"))
pdf("envelopeInhom.pdf", width=7, height=5)
plot(testEnv97, legendargs=legendargs, xlim=c(0, .25), ylim=c(0, .3),
main=expression("Estimated, simulated, and theoretical" ~ italic(K) ~
"functions (not assuming homogeneity)"))
rs = seq(.001, .25, length=100)
Krs = sapply(rs, K)
lines(rs, Krs, col="blue")
dev.off()
setwd("~/git/prelim/code")
pdf("envelopeInhom.pdf", width=7, height=5)
plot(testEnv97, legendargs=legendargs, xlim=c(0, .25), ylim=c(0, .3),
main=expression("Estimated, simulated, and theoretical" ~ italic(K) ~
"functions (not assuming homogeneity)"))
rs = seq(.001, .25, length=100)
Krs = sapply(rs, K)
lines(rs, Krs, col="blue")
dev.off()
legendargs = list(x="topleft",
legend=expression(italic(hat(K)[obs](r)), italic(bar(K)[sim](r)),
italic(K[theo](r))),
lty=c(1, 2, 1), col=c("black", "red", "blue"), y.intersp=1)
# legendargs = list(y.intersp=.3)
pdf("envelopeInhom.pdf", width=7, height=5)
plot(testEnv97, legendargs=legendargs, xlim=c(0, .25), ylim=c(0, .3),
main=expression("Estimated, simulated, and theoretical" ~ italic(K) ~
"functions (not assuming homogeneity)"))
rs = seq(.001, .25, length=100)
Krs = sapply(rs, K)
lines(rs, Krs, col="blue")
dev.off()
legendargs = list(x="topleft",
legend=expression(italic(hat(K)[obs](r)), italic(bar(K)[sim](r)),
italic(K[theo](r))),
lty=c(1, 2, 1), col=c("black", "red", "blue"), y.intersp=1.25)
# legendargs = list(y.intersp=.3)
pdf("envelopeInhom.pdf", width=7, height=5)
plot(testEnv97, legendargs=legendargs, xlim=c(0, .25), ylim=c(0, .3),
main=expression("Estimated, simulated, and theoretical" ~ italic(K) ~
"functions (not assuming homogeneity)"))
rs = seq(.001, .25, length=100)
Krs = sapply(rs, K)
lines(rs, Krs, col="blue")
dev.off()
simKs97 = attr(testEnv97, "simfuns")
class(simKs97) = "data.frame"
r = simKs97[,1]
simKs97 = simKs97[,-1]
simKSD97 = apply(test, 1, sd)
Krs = sapply(r, K)
numSDs = qnorm(.975) #for 95% confidence interval
uncertainties = simKSD97*numSDs
minRange = min(Krs - uncertainties)
minRange = min(c(minRange, testEnv97$obs))
maxRange = max(Krs + uncertainties)
maxRange = max(c(maxRange, testEnv97$obs))
polyX = c(r, rev(r), r[1])
polyY = c(Krs + uncertainties, rev(Krs - uncertainties), Krs[1] + uncertainties[1])
plot(r, Krs, type="n", ylim=c(minRange, maxRange), lwd=2, col="blue",
main=expression("Observed and theoretical" ~ italic(K) ~
"functions"))
polygon(polyX, polyY, col=rgb(.4,.4,.4,.5), border=rgb(.5,.5,.5,.5))
lines(r, Krs, lwd=2, col=rgb(.4,.4,.4), lty=2)
# plot(r, Krs, type="l", ylim=c(minRange, maxRange), lwd=2, col="blue",
#      main=expression("Observed and theoretical" ~ italic(K) ~
#                      "functions"))
# lines(r, Krs - uncertainties, lty=2, col=rgb(.4,.4,.4))
# lines(r, Krs + uncertainties, lty=2, col=rgb(.4,.4,.4))
lines(r, testEnv97$obs, lwd=2)
legend(x="topleft", lty=c(1, 2), col=c("black", rgb(.4,.4,.4)), y.intersp=1,
legend=expression(italic(hat(K)[obs](r)), italic(K[theo](r))), lwd=2)
plot(r, Krs, type="n", ylim=c(minRange, maxRange), lwd=2, col="blue",
main=expression("Observed and theoretical" ~ italic(K) ~
"functions"),
xlim=c(0, .25), xlab=expression(italic(r)), ylab=expression(italic(K(r))))
polygon(polyX, polyY, col=rgb(.4,.4,.4,.5), border=rgb(.5,.5,.5,.5))
lines(r, Krs, lwd=2, col=rgb(.4,.4,.4), lty=2)
# plot(r, Krs, type="l", ylim=c(minRange, maxRange), lwd=2, col="blue",
#      main=expression("Observed and theoretical" ~ italic(K) ~
#                      "functions"))
# lines(r, Krs - uncertainties, lty=2, col=rgb(.4,.4,.4))
# lines(r, Krs + uncertainties, lty=2, col=rgb(.4,.4,.4))
lines(r, testEnv97$obs, lwd=2)
legend(x="topleft", lty=c(1, 2), col=c("black", rgb(.4,.4,.4)), y.intersp=1,
legend=expression(italic(hat(K)[obs](r)), italic(K[theo](r))),
lwd=2)
plot(r, Krs, type="n", ylim=c(minRange, maxRange), lwd=2, col="blue",
main=expression("Observed and theoretical" ~ italic(K) ~
"functions"),
xlim=c(0, .25), ylim=c(0, .4), xlab=expression(italic(r)),
ylab=expression(italic(K(r))))
polygon(polyX, polyY, col=rgb(.4,.4,.4,.5), border=rgb(.5,.5,.5,.5))
lines(r, Krs, lwd=2, col=rgb(.4,.4,.4), lty=2)
# plot(r, Krs, type="l", ylim=c(minRange, maxRange), lwd=2, col="blue",
#      main=expression("Observed and theoretical" ~ italic(K) ~
#                      "functions"))
# lines(r, Krs - uncertainties, lty=2, col=rgb(.4,.4,.4))
# lines(r, Krs + uncertainties, lty=2, col=rgb(.4,.4,.4))
lines(r, testEnv97$obs, lwd=2)
legend(x="topleft", lty=c(1, 2), col=c("black", rgb(.4,.4,.4)), y.intersp=1,
legend=expression(italic(hat(K)[obs](r)), italic(K[theo](r))),
lwd=2)
plot(r, Krs, type="n", ylim=c(minRange, maxRange), lwd=2, col="blue",
main=expression("Observed and theoretical" ~ italic(K) ~
"functions"),
xlim=c(0, .25), ylim=c(0, .4), xlab=expression(italic(r)),
ylab=expression(italic(K(r))))
polygon(polyX, polyY, col=rgb(.4,.4,.4,.5), border=rgb(.5,.5,.5,.5))
lines(r, Krs, lwd=2, col=rgb(.4,.4,.4), lty=2)
# plot(r, Krs, type="l", ylim=c(minRange, maxRange), lwd=2, col="blue",
#      main=expression("Observed and theoretical" ~ italic(K) ~
#                      "functions"))
# lines(r, Krs - uncertainties, lty=2, col=rgb(.4,.4,.4))
# lines(r, Krs + uncertainties, lty=2, col=rgb(.4,.4,.4))
lines(r, testEnv97$obs, lwd=2)
legend(x="topleft", lty=c(1, 2), col=c("black", rgb(.4,.4,.4)), y.intersp=1,
legend=expression(italic(hat(K)[obs](r)), italic(K[theo](r))),
lwd=2)
plot(r, Krs, type="n", ylim=c(minRange, maxRange), lwd=2, col="blue",
main=expression("Observed and theoretical" ~ italic(K) ~
"functions"),
xlim=c(0, .25), ylim=c(0, .4), xlab=expression(italic(r)),
ylab=expression(italic(K(r))))
polygon(polyX, polyY, col=rgb(.4,.4,.4,.5), border=rgb(.5,.5,.5,.5))
lines(r, Krs, lwd=2, col=rgb(.4,.4,.4), lty=2)
# plot(r, Krs, type="l", ylim=c(minRange, maxRange), lwd=2, col="blue",
#      main=expression("Observed and theoretical" ~ italic(K) ~
#                      "functions"))
# lines(r, Krs - uncertainties, lty=2, col=rgb(.4,.4,.4))
# lines(r, Krs + uncertainties, lty=2, col=rgb(.4,.4,.4))
lines(r, testEnv97$obs, lwd=2)
legend(x="topleft", lty=c(1, 2), col=c("black", rgb(.4,.4,.4)), y.intersp=1,
legend=expression(italic(hat(K)[obs](r)), italic(K[theo](r))),
lwd=2)
plot(r, Krs, type="n", lwd=2, col="blue",
main=expression("Observed and theoretical" ~ italic(K) ~
"functions"),
xlim=c(0, .25), ylim=c(0, .4), xlab=expression(italic(r)),
ylab=expression(italic(K(r))))
polygon(polyX, polyY, col=rgb(.4,.4,.4,.5), border=rgb(.5,.5,.5,.5))
lines(r, Krs, lwd=2, col=rgb(.4,.4,.4), lty=2)
# plot(r, Krs, type="l", ylim=c(minRange, maxRange), lwd=2, col="blue",
#      main=expression("Observed and theoretical" ~ italic(K) ~
#                      "functions"))
# lines(r, Krs - uncertainties, lty=2, col=rgb(.4,.4,.4))
# lines(r, Krs + uncertainties, lty=2, col=rgb(.4,.4,.4))
lines(r, testEnv97$obs, lwd=2)
legend(x="topleft", lty=c(1, 2), col=c("black", rgb(.4,.4,.4)), y.intersp=1,
legend=expression(italic(hat(K)[obs](r)), italic(K[theo](r))),
lwd=2)
?Kinhom
lines(rs, pi*rs^2)
?Kest
Kinhom
Krs = K(r)
plot(r, Krs, main="Theoretical K function using MLEs", xlab=expression(italic(r)),
ylab=expression(italic(K(r))), type="l", lwd=2, col="blue")
r = seq(0, .25, length=100)
Krs = K(r)
plot(r, Krs, main="Theoretical K function using MLEs", xlab=expression(italic(r)),
ylab=expression(italic(K(r))), type="l", lwd=2, col="blue")
pdf("Ktheo.pdf", width=7, height=5)
plot(r, Krs, main="Theoretical K function using MLEs", xlab=expression(italic(r)),
ylab=expression(italic(K(r))), type="l", lwd=2, col="blue")
dev.off()
?Matern
Matern
sqrt(.2)
exp(-.992)
exp(-.992)^2
exp(-1.163)
exp(-1.419)^2
?sim.mKrig.approx
sim.mKrig.approx
M1 = runif(1000) > .5
M2 = runif(1000) > .5
ALOB = M1 | M2
sum(ALOB)
Mmat = cbind(M1, M2)
BB = M1 & M2
(ALOB * BB)/sum(ALOB)
sum(ALOB & BB)/sum(ALOB)
sample(1:2000, 1)
M2[173]
sample(1:2000, 1)
M2[798]
library(RandomFields)
?RPcirculant
?rLGCP
?rpoispp
80*80
?mKrig
?RMmatern
?RFsimulate
?RFmatern
RMmatern
?RMmatern
source('~/git/prelim/code/simulatePP.R')
source('~/git/prelim/code/simulatePP.R')
?RFsimulate
source('~/git/prelim/code/simulatePP.R')
test = genMatern()
test = genMaternGP()
names(test)
?RMmatern
plot(test)
?RFsimulate
source('~/git/prelim/code/simulatePP.R')
test = genMaternGP()
test = genMaternGP(sim=5)
test = genMaternGP(nsim=5)
names(test)
dim(test)
length(test)
plot(test$variable1.n1)
dim(test$variable1.n1)
legth(test$variable1.n1)
length(test$variable1.n1)
source('~/git/prelim/code/simulatePP.R')
test = genMaternGP(nsim=5)
plot(test[[1]])
class(test[[1]])
typeof(test[[1]])
source('~/git/prelim/code/simulatePP.R')
coords = genUnifPP()
dim(coords)
length(coords)
names(coords)
plot(coords)
plot(test[[1]])
plot(coords, add=TRUE, pch=".")
plot(test[[1]])
points(coords, add=TRUE, pch="19")
points(coords, pch=19)
range(coords[,1])
names(coords)
range(coords$x)
range(coords$y)
plot(test[[1]])
points(coords$x, coords$y)
coords$n
coords = enUnifPP(numSamples=5)
coords = genUnifPP(numSamples=5)
points(coords[[1]]$x, coords[[1]]$y)
length(coords)
names(coords)
source('~/git/prelim/code/simulatePP.R')
coords = genUnifPP(numSamples=5)
names(coords)
length(coords)
length(coords[[1]])
names(coords[[1]])
?rLGCP
source('~/git/prelim/code/simulatePP.R')
clustTest = genClusterPP()
source('~/git/prelim/code/simulatePP.R')
clustTest = genClusterPP()
names(clustTest)
length(clustTest)
names(clustTest[[1]])
plot(clustTest[[1]])
attributes(clustTest[[1]])
Lambda = attributes(clustTest[[1]])
dim(Lambda)
length(Lambda)
names(Lambda)
class(Lambda)
Lambda
Lambda = attribute(clustTest[[1]], "Lambda")
Lambda = attr(clustTest[[1]], "Lambda")
dim(Lambda)
plot(Lambda)
Lambda[1:5, 1:5]
?rLGCP
class(Lambda)
source('~/git/prelim/code/simulatePP.R')
test = genClusterPP()
names(test)
length(test)
plottest[[1]]$sim)
plot(test[[1]]$sim)
scaleMLE
debugSource('~/git/prelim/code/simulatePP.R')
test = genClusterPP()
overallMuEst
varEst
beta
source('~/git/prelim/code/simulatePP.R')
test = genClusterPP()
plot(test[[1]]$Lambda)
dim(test[[1]]$Lambda)
names(test[[1]]$sim)
test[[1]]$sim$n
range(test[[1]]$Lambda)
sum(test[[1]]$Lambda < .01)
plot(log(Lambda))
plot(log(test[[1]]$Lambda))
source('~/git/prelim/code/simulatePP.R')
source('~/git/prelim/code/simulatePP.R')
test = genMaternGP()
names(test)
dim(test)
attributes(test)
plot(test)
source('~/git/prelim/code/simulatePP.R')
source('~/git/prelim/code/simulatePP.R')
plot(test)
source('~/git/prelim/code/simulatePP.R')
test = genMaternGP()
names(test)
length(test)
names(test[[1]])
names(test[[1]]$variable1)
dim(test[[1]]$variable1)
length(test[[1]]$variable1)
attributes(test[[1]]$variable1)
x = error("fail")
x = stop("fail")
source('~/git/prelim/code/simulatePP.R')
test = genPreferentialPP()
source('~/git/prelim/code/simulatePP.R')
test = genPreferentialPP()
names(test)
plot(test$GPs[[1]])
plot(test$sims[[1]])
names(test$sims[[1]])
length(test$sims)
plot(test$sims)
plot(test$GPs)
plot(test$GPs[[1]])
names(test$GPs)
class(test$GPs)
names(test$Lambdas)
plot(test$Lambdas)
names(test$Lambdas)
dim(test$Lambdas)
dim(test$Lambdas[[1]])
length(test$Lambdas[[1]])
length(test$Lambdas)
test$Lambdas
source('~/git/prelim/code/simulatePP.R')
test = genPreferentialPP()
plot(test$Lambdas[[1]])
plot(test$Lambdas)
names(test$Lambdas)
class(test$Lambdas)
dim(test$Lambdas)
plot(test$Lambdas[[1]])
dim(test$Lambdas[[1]])
dim(as.im(test$Lambdas[[1]]))
plot(as.im(test$Lambdas[[1]]))
source('~/git/prelim/code/simulatePP.R')
test = genPreferentialPP()
plot(test$Lambdas[[1]])
test$Lambdas = lapply(test$Lambdas, as.im)
plot(test$sims[[1]])
plot(test$sims)
test = genPreferentialPP(nsims=5)
test = genPreferentialPP(numSamples=5)
test$sims[[1]]$n
names(test$sims[[1]])
length(test$sims)
source('~/git/prelim/code/simulatePP.R')
test = genPreferentialPP(numSamples=5)
plot(test$Lambda[[i]])
plot(test$Lambda[[1]])
plot(test$GPs[[1]])
names(test$GPs[[1]])
source('~/git/prelim/code/simulatePP.R')
test = genPreferentialPP(numSamples=5)
plot(test$GPs[[1]])
plot(test$Lambdass[[1]])
plot(test$Lambdas[[1]])
plot(test$sims[[1]])
test = genClusterPP(numSamples=5)
plot(test$sims[[1]])
plot(test$GPs[[1]])
plot(test$sims[[2]])
plot(test$GPs[[2]])
plot(test$sims[[2]])
plot(test$sims[[3]])
plot(test$GPs[[3]])
source('~/git/prelim/code/simulatePP.R')
?vario
?vgram
names(test$sims[[1]])
names(test$GPs[[1]])
names(test$GPs[[1]]$variable1)
length(test$GPs[[1]]$variable1)
length(test$PPs[[1]])
names(test$PPs[[1]])
names(test$PPs)
names(test$sims[[1]])
test$sims[[1]]$markformat
test$sims[[1]]$y
?rLGCP
names(test$GPs[[1]])
names(test$GPs[[1]]$variable1)
attributes(test$GPs[[1]]$variable1)
attributes(test$GPs[[1]])
names(attributes(test$GPs[[1]]))
dim(attr(test$GPs[[1]], "coords"))
dim(attr(test$GPs[[1]], "coords.nrs"))
length(attr(test$GPs[[1]], "coords.nrs"))
attr(test$GPs[[1]], "coords")[1,]
attr(test$GPs[[1]], "coords")[2,]
attr(test$GPs[[1]], "coords")[3,]
attr(test$GPs[[1]], "coords")[128,]
attr(test$GPs[[1]], "coords")[129,]
make.surface.grid(list(1:2, 3:4))
x = matrix(runif(10), nrow=5)
#get compact distance matrix
distOut = rdist(x, compact=TRUE)
diagVal = Exponential(0, range=1)
compactCovMat = Exponential(distOut, range=1)
upperCovMat = compactToMat(compactCovMat, diagVal)
lowerCovMat = compactToMat(compactCovMat, diagVal, lower.tri=TRUE, upper.tri=FALSE)
fullCovMat = compactToMat(compactCovMat, diagVal, lower.tri=TRUE, upper.tri=TRUE)
compactCovMat
lowerCovMat
upperCovMat
?predictDerivative.Krig
detach("package:fields", unload=TRUE)
library("fields", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?fields
